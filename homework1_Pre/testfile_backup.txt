void adjust(int a[], int i, int n)
{
	int j, temp;
	temp = a[i];
	j = 2 * i + 1;
	while (j < n) {
		if (j + 1 < n && a[j] < a[j + 1]) j++;
		js++;
		if (temp < a[j]) {
			a[(j - 1) / 2] = a[j];//j-1 
			j = 2 * j + 1;
		}
		else break;
	}
	a[(j - 1) / 2] = temp;//ÎªÊ²Ã´ÊÇ(j-1)/2????? 
}
void heapsort(int a[], int n)
{
	int i, temp;
	for (i = n / 2 - 1; i >= 0; i--) adjust(a, i, n);
	for (i = n - 1; i >= 1; i--) {
		temp = a[i];
		a[i] = a[0];
		a[0] = temp;
		adjust(a, 0, i);
	}
}
void merge(int a[], int tmp[], int left, int leftend, int rightend)
{
	int i = left, j = leftend + 1, q = left;
	while (i <= leftend && j <= rightend) {
		js++;
		if (a[i] <= a[j]) tmp[q++] = a[i++];
		else tmp[q++] = a[j++];
	}
	while (i <= leftend) tmp[q++] = a[i++];
	while (j <= rightend) tmp[q++] = a[j++];
	for (i = left; i <= rightend; i++) a[i] = tmp[i];
}
void msort(int a[], int tmp[], int left, int right)
{
	int center;
	if (left < right) {
		center = left + (right - left) / 2;
		msort(a, tmp, left, center);
		msort(a, tmp, center + 1, right);
		merge(a, tmp, left, center, right);
	}
}
void mergesort(int a[], int n)
{
	int* tmp;
	tmp = (int*)malloc(sizeof(int) * n);
	msort(a, tmp, 0, n - 1);
	free(tmp);
}